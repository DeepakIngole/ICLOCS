% This code was generated using ADiGator version 1.4
% ©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function dx = dynamics_Y(x,u,p,t,data)
global ADiGator_dynamics_Y
if isempty(ADiGator_dynamics_Y); ADiGator_LoadData(); end
Gator1Data = ADiGator_dynamics_Y.dynamics_Y.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: % Aircraft Dynamics
%User Line: %
%User Line: % Copyright (C) 2018 Yuanbo Nie, Omar Faqir, and Eric Kerrigan. All Rights Reserved.
%User Line: % The contribution of Paola Falugi, Eric Kerrigan and Eugene van Wyk for the work on ICLOCS Version 1 (2010) is kindly acknowledged.
%User Line: % This code is published under the BSD License.
%User Line: % Department of Aeronautics and Department of Electrical and Electronic Engineering,
%User Line: % Imperial College London London  England, UK
%User Line: % ICLOCS (Imperial College London Optimal Control) Version 2.0
%User Line: % 1 May 2018
%User Line: % iclocs@imperial.ac.uk
auxdata = data.auxdata;
%User Line: auxdata = data.auxdata;
pos.dY = x.dY(:,1);
pos.f = x.f(:,1);
%User Line: pos = x(:,1);
h.dY = x.dY(:,2);
h.f = x.f(:,2);
%User Line: h = x(:,2);
v.dY = x.dY(:,3);
v.f = x.f(:,3);
%User Line: v = x(:,3);
fpa.dY = x.dY(:,4);
fpa.f = x.f(:,4);
%User Line: fpa = x(:,4);
alpha.dY = u.dY(:,1);
alpha.f = u.f(:,1);
%User Line: alpha = u(:,1);
cada1tf1 = ppval(Gator1Data.Data1,t.f);
cada1f1dT = cada1tf1(:,1).*t.dT;
cada1f1 = ppval(auxdata.beta_poly,t.f);
cada1f2dY = auxdata.A_1.*v.dY;
cada1f2 = auxdata.A_1*v.f;
cada1f3dY = cada1f2dY;
cada1f3 = auxdata.A_0 + cada1f2;
cada1f4dY = 2.*v.f.^(2-1).*v.dY;
cada1f4 = v.f.^2;
cada1f5dY = auxdata.A_2.*cada1f4dY;
cada1f5 = auxdata.A_2*cada1f4;
cada1td1 = cada1f3dY;
cada1td1 = cada1td1 + cada1f5dY;
cada1f6dY = cada1td1;
cada1f6 = cada1f3 + cada1f5;
T.dY = cada1f1.*cada1f6dY;
T.dT = cada1f6.*cada1f1dT;
T.f = cada1f1.*cada1f6;
%User Line: T=ppval(auxdata.beta_poly,t).*(auxdata.A_0+auxdata.A_1.*v+auxdata.A_2.*v.^2);
cada1f1dY = auxdata.B_1.*alpha.dY;
cada1f1 = auxdata.B_1*alpha.f;
cada1f2dY = cada1f1dY;
cada1f2 = auxdata.B_0 + cada1f1;
cada1f3dY = 2.*alpha.f.^(2-1).*alpha.dY;
cada1f3 = alpha.f.^2;
cada1f4dY = auxdata.B_2.*cada1f3dY;
cada1f4 = auxdata.B_2*cada1f3;
cada1td1 = cada1f2dY;
cada1td1 = cada1td1 + cada1f4dY;
cada1f5dY = cada1td1;
cada1f5 = cada1f2 + cada1f4;
cada1f6dY = 0.5.*cada1f5dY;
cada1f6 = 0.5*cada1f5;
cada1f7dY = auxdata.rho.*cada1f6dY;
cada1f7 = cada1f6*auxdata.rho;
cada1f8dY = auxdata.S.*cada1f7dY;
cada1f8 = cada1f7*auxdata.S;
cada1f9dY = 2.*v.f.^(2-1).*v.dY;
cada1f9 = v.f.^2;
cada1td1 = zeros(size(cada1f8dY,1),2);
cada1td1(:,2) = cada1f9.*cada1f8dY;
cada1td1(:,1) = cada1td1(:,1) + cada1f8.*cada1f9dY;
D.dY = cada1td1;
D.f = cada1f8.*cada1f9;
%User Line: D=0.5*(auxdata.B_0+auxdata.B_1.*alpha+auxdata.B_2.*alpha.^2).*auxdata.rho.*auxdata.S.*v.^2;
cada1tf1 = ppval(Gator1Data.Data2,alpha.f);
cada1f1dY = cada1tf1(:,1).*alpha.dY;
cada1f1 = ppval(auxdata.C_L_poly,alpha.f);
cada1f2dY = 0.5.*cada1f1dY;
cada1f2 = 0.5*cada1f1;
cada1f3dY = auxdata.rho.*cada1f2dY;
cada1f3 = cada1f2*auxdata.rho;
cada1f4dY = auxdata.S.*cada1f3dY;
cada1f4 = cada1f3*auxdata.S;
cada1f5dY = 2.*v.f.^(2-1).*v.dY;
cada1f5 = v.f.^2;
cada1td1 = zeros(size(cada1f4dY,1),2);
cada1td1(:,2) = cada1f5.*cada1f4dY;
cada1td1(:,1) = cada1td1(:,1) + cada1f4.*cada1f5dY;
L.dY = cada1td1;
L.f = cada1f4.*cada1f5;
%User Line: L=0.5*ppval(auxdata.C_L_poly,alpha).*auxdata.rho.*auxdata.S.*v.^2;
cada1f1dY = -sin(fpa.f).*fpa.dY;
cada1f1 = cos(fpa.f);
cada1td1 = zeros(size(v.dY,1),2);
cada1td1(:,1) = cada1f1.*v.dY;
cada1td1(:,2) = cada1td1(:,2) + v.f.*cada1f1dY;
cada1f2dY = cada1td1;
cada1f2 = v.f.*cada1f1;
cada1tf1 = ppval(Gator1Data.Data3,pos.f);
cada1f3dY = cada1tf1(:,1).*pos.dY;
cada1f3 = ppval(auxdata.W1_poly,pos.f);
cada1td1 = zeros(size(cada1f2dY,1),3);
cada1td1(:,Gator1Data.Index1) = cada1f2dY;
cada1td1(:,1) = cada1td1(:,1) + cada1f3dY;
posdot.dY = cada1td1;
posdot.f = cada1f2 + cada1f3;
%User Line: posdot=v.*cos(fpa)+ppval(auxdata.W1_poly,pos);
cada1f1dY = cos(fpa.f).*fpa.dY;
cada1f1 = sin(fpa.f);
cada1td1 = zeros(size(v.dY,1),2);
cada1td1(:,1) = cada1f1.*v.dY;
cada1td1(:,2) = cada1td1(:,2) + v.f.*cada1f1dY;
cada1f2dY = cada1td1;
cada1f2 = v.f.*cada1f1;
cada1tf1 = ppval(Gator1Data.Data4,pos.f);
cada1f3dY = cada1tf1(:,1).*pos.dY;
cada1f3 = ppval(auxdata.W2_poly,pos.f);
cada1td1 = zeros(size(cada1f3dY,1),2);
cada1td1(:,1) = h.f.*cada1f3dY;
cada1td1(:,2) = cada1td1(:,2) + cada1f3.*h.dY;
cada1f4dY = cada1td1;
cada1f4 = cada1f3.*h.f;
cada1f5dY = cada1f4dY./1000;
cada1f5 = cada1f4/1000;
cada1td1 = zeros(size(cada1f2dY,1),4);
cada1td1(:,Gator1Data.Index2) = cada1f2dY;
cada1td1(:,Gator1Data.Index3) = cada1td1(:,Gator1Data.Index3) + cada1f5dY;
hdot.dY = cada1td1;
hdot.f = cada1f2 + cada1f5;
%User Line: hdot=v.*sin(fpa)+ppval(auxdata.W2_poly,pos).*h/1000;
cada1td1 = zeros(size(pos.dY,1),3);
cada1td1(:,1) = pos.dY;
cada1td1 = cada1td1 + posdot.dY;
cada1f1dY = cada1td1;
cada1f1 = pos.f + posdot.f;
cada1tf1 = ppval(Gator1Data.Data5,cada1f1);
cada1f2dY = cada1tf1(:,Gator1Data.Index4).*cada1f1dY;
cada1f2 = ppval(auxdata.W1_poly,cada1f1);
cada1tf1 = ppval(Gator1Data.Data6,pos.f);
cada1f3dY = cada1tf1(:,1).*pos.dY;
cada1f3 = ppval(auxdata.W1_poly,pos.f);
cada1td1 = cada1f2dY;
cada1td1(:,1) = cada1td1(:,1) + -cada1f3dY;
W1_dot.dY = cada1td1;
W1_dot.f = cada1f2 - cada1f3;
%User Line: W1_dot=ppval(auxdata.W1_poly,pos+posdot)-ppval(auxdata.W1_poly,pos);
cada1td1 = zeros(size(pos.dY,1),3);
cada1td1(:,1) = pos.dY;
cada1td1 = cada1td1 + posdot.dY;
cada1f1dY = cada1td1;
cada1f1 = pos.f + posdot.f;
cada1tf1 = ppval(Gator1Data.Data7,cada1f1);
cada1f2dY = cada1tf1(:,Gator1Data.Index5).*cada1f1dY;
cada1f2 = ppval(auxdata.W2_poly,cada1f1);
cada1td1 = zeros(size(h.dY,1),4);
cada1td1(:,2) = h.dY;
cada1td1 = cada1td1 + hdot.dY;
cada1f3dY = cada1td1;
cada1f3 = h.f + hdot.f;
cada1tf1 = cada1f3(:,Gator1Data.Index6);
cada1td1 = zeros(size(cada1f2dY,1),4);
cada1td1(:,Gator1Data.Index7) = cada1tf1.*cada1f2dY;
cada1tf1 = cada1f2(:,Gator1Data.Index8);
cada1td1 = cada1td1 + cada1tf1.*cada1f3dY;
cada1f4dY = cada1td1;
cada1f4 = cada1f2.*cada1f3;
cada1f5dY = cada1f4dY./1000;
cada1f5 = cada1f4/1000;
cada1tf1 = ppval(Gator1Data.Data8,pos.f);
cada1f6dY = cada1tf1(:,1).*pos.dY;
cada1f6 = ppval(auxdata.W2_poly,pos.f);
cada1td1 = zeros(size(cada1f6dY,1),2);
cada1td1(:,1) = h.f.*cada1f6dY;
cada1td1(:,2) = cada1td1(:,2) + cada1f6.*h.dY;
cada1f7dY = cada1td1;
cada1f7 = cada1f6.*h.f;
cada1f8dY = cada1f7dY./1000;
cada1f8 = cada1f7/1000;
cada1td1 = cada1f5dY;
cada1td1(:,Gator1Data.Index9) = cada1td1(:,Gator1Data.Index9) + -cada1f8dY;
W2_dot.dY = cada1td1;
W2_dot.f = cada1f5 - cada1f8;
%User Line: W2_dot=ppval(auxdata.W2_poly,pos+posdot).*(h+hdot)/1000-ppval(auxdata.W2_poly,pos).*h/1000;
cada1f1dY = T.dY./auxdata.m;
cada1f1dT = T.dT./auxdata.m;
cada1f1 = T.f/auxdata.m;
cada1f2dY = alpha.dY;
cada1f2 = alpha.f + auxdata.delta;
cada1f3dY = -sin(cada1f2).*cada1f2dY;
cada1f3 = cos(cada1f2);
cada1td1 = zeros(size(cada1f1dY,1),2);
cada1td1(:,1) = cada1f3.*cada1f1dY;
cada1td1(:,2) = cada1td1(:,2) + cada1f1.*cada1f3dY;
cada1f4dY = cada1td1;
cada1f4dT = cada1f3.*cada1f1dT;
cada1f4 = cada1f1.*cada1f3;
cada1f5dY = D.dY./auxdata.m;
cada1f5 = D.f/auxdata.m;
cada1td1 = cada1f4dY;
cada1td1 = cada1td1 + -cada1f5dY;
cada1f6dY = cada1td1;
cada1f6dT = cada1f4dT;
cada1f6 = cada1f4 - cada1f5;
cada1f7dY = cos(fpa.f).*fpa.dY;
cada1f7 = sin(fpa.f);
cada1f8dY = auxdata.g.*cada1f7dY;
cada1f8 = auxdata.g*cada1f7;
cada1td1 = zeros(size(cada1f6dY,1),3);
cada1td1(:,Gator1Data.Index10) = cada1f6dY;
cada1td1(:,2) = cada1td1(:,2) + -cada1f8dY;
cada1f9dY = cada1td1;
cada1f9dT = cada1f6dT;
cada1f9 = cada1f6 - cada1f8;
cada1f10dY = -sin(fpa.f).*fpa.dY;
cada1f10 = cos(fpa.f);
cada1tf1 = cada1f10(:,Gator1Data.Index11);
cada1td1 = cada1tf1.*W1_dot.dY;
cada1td1(:,3) = cada1td1(:,3) + W1_dot.f.*cada1f10dY;
cada1f11dY = cada1td1;
cada1f11 = W1_dot.f.*cada1f10;
cada1f12dY = cos(fpa.f).*fpa.dY;
cada1f12 = sin(fpa.f);
cada1tf1 = cada1f12(:,Gator1Data.Index12);
cada1td1 = cada1tf1.*W2_dot.dY;
cada1td1(:,4) = cada1td1(:,4) + W2_dot.f.*cada1f12dY;
cada1f13dY = cada1td1;
cada1f13 = W2_dot.f.*cada1f12;
cada1td1 = zeros(size(cada1f11dY,1),4);
cada1td1(:,Gator1Data.Index13) = cada1f11dY;
cada1td1 = cada1td1 + cada1f13dY;
cada1f14dY = cada1td1;
cada1f14 = cada1f11 + cada1f13;
cada1td1 = zeros(size(cada1f9dY,1),5);
cada1td1(:,Gator1Data.Index14) = cada1f9dY;
cada1td1(:,Gator1Data.Index15) = cada1td1(:,Gator1Data.Index15) + -cada1f14dY;
vdot.dY = cada1td1;
vdot.dT = cada1f9dT;
vdot.f = cada1f9 - cada1f14;
%User Line: vdot=T./auxdata.m.*cos(alpha+auxdata.delta)-D./auxdata.m-auxdata.g*sin(fpa)-(W1_dot.*cos(fpa)+W2_dot.*sin(fpa));
cada1f1dY = T.dY./auxdata.m;
cada1f1dT = T.dT./auxdata.m;
cada1f1 = T.f/auxdata.m;
cada1td1 = cada1f1dY./v.f;
cada1td1 = cada1td1 + -cada1f1./v.f.^2.*v.dY;
cada1f2dY = cada1td1;
cada1f2dT = cada1f1dT./v.f;
cada1f2 = cada1f1./v.f;
cada1f3dY = alpha.dY;
cada1f3 = alpha.f + auxdata.delta;
cada1f4dY = cos(cada1f3).*cada1f3dY;
cada1f4 = sin(cada1f3);
cada1td1 = zeros(size(cada1f2dY,1),2);
cada1td1(:,1) = cada1f4.*cada1f2dY;
cada1td1(:,2) = cada1td1(:,2) + cada1f2.*cada1f4dY;
cada1f5dY = cada1td1;
cada1f5dT = cada1f4.*cada1f2dT;
cada1f5 = cada1f2.*cada1f4;
cada1f6dY = L.dY./auxdata.m;
cada1f6 = L.f/auxdata.m;
cada1tf1 = v.f(:,Gator1Data.Index16);
cada1td1 = cada1f6dY./cada1tf1;
cada1td1(:,1) = cada1td1(:,1) + -cada1f6./v.f.^2.*v.dY;
cada1f7dY = cada1td1;
cada1f7 = cada1f6./v.f;
cada1td1 = cada1f5dY;
cada1td1 = cada1td1 + cada1f7dY;
cada1f8dY = cada1td1;
cada1f8dT = cada1f5dT;
cada1f8 = cada1f5 + cada1f7;
cada1f9dY = -auxdata.g./v.f.^2.*v.dY;
cada1f9 = auxdata.g./v.f;
cada1f10dY = -sin(fpa.f).*fpa.dY;
cada1f10 = cos(fpa.f);
cada1td1 = zeros(size(cada1f9dY,1),2);
cada1td1(:,1) = cada1f10.*cada1f9dY;
cada1td1(:,2) = cada1td1(:,2) + cada1f9.*cada1f10dY;
cada1f11dY = cada1td1;
cada1f11 = cada1f9.*cada1f10;
cada1td1 = zeros(size(cada1f8dY,1),3);
cada1td1(:,Gator1Data.Index17) = cada1f8dY;
cada1td1(:,Gator1Data.Index18) = cada1td1(:,Gator1Data.Index18) + -cada1f11dY;
cada1f12dY = cada1td1;
cada1f12dT = cada1f8dT;
cada1f12 = cada1f8 - cada1f11;
cada1f13dY = cos(fpa.f).*fpa.dY;
cada1f13 = sin(fpa.f);
cada1tf1 = cada1f13(:,Gator1Data.Index19);
cada1td1 = cada1tf1.*W1_dot.dY;
cada1td1(:,3) = cada1td1(:,3) + W1_dot.f.*cada1f13dY;
cada1f14dY = cada1td1;
cada1f14 = W1_dot.f.*cada1f13;
cada1f15dY = -sin(fpa.f).*fpa.dY;
cada1f15 = cos(fpa.f);
cada1tf1 = cada1f15(:,Gator1Data.Index20);
cada1td1 = cada1tf1.*W2_dot.dY;
cada1td1(:,4) = cada1td1(:,4) + W2_dot.f.*cada1f15dY;
cada1f16dY = cada1td1;
cada1f16 = W2_dot.f.*cada1f15;
cada1td1 = zeros(size(cada1f14dY,1),4);
cada1td1(:,Gator1Data.Index21) = cada1f14dY;
cada1td1 = cada1td1 + -cada1f16dY;
cada1f17dY = cada1td1;
cada1f17 = cada1f14 - cada1f16;
cada1tf1 = v.f(:,Gator1Data.Index22);
cada1td1 = cada1f17dY./cada1tf1;
cada1td1(:,3) = cada1td1(:,3) + -cada1f17./v.f.^2.*v.dY;
cada1f18dY = cada1td1;
cada1f18 = cada1f17./v.f;
cada1td1 = zeros(size(cada1f12dY,1),5);
cada1td1(:,Gator1Data.Index23) = cada1f12dY;
cada1td1(:,Gator1Data.Index24) = cada1td1(:,Gator1Data.Index24) + cada1f18dY;
fpadot.dY = cada1td1;
fpadot.dT = cada1f12dT;
fpadot.f = cada1f12 + cada1f18;
%User Line: fpadot=T./auxdata.m./v.*sin(alpha+auxdata.delta)+L./auxdata.m./v-auxdata.g./v.*cos(fpa)+(W1_dot.*sin(fpa)-W2_dot.*cos(fpa))./v;
cada1td1 = zeros(size(posdot.f,1),17);
cada1td1(:,Gator1Data.Index25) = posdot.dY;
cada1td1(:,Gator1Data.Index26) = hdot.dY;
cada1td1(:,Gator1Data.Index27) = vdot.dY;
cada1td1(:,Gator1Data.Index28) = fpadot.dY;
dx.dY = cada1td1;
cada1td1 = zeros(size(posdot.f,1),2);
cada1td1(:,1) = vdot.dT;
cada1td1(:,2) = fpadot.dT;
dx.dT = cada1td1;
dx.f = [posdot.f hdot.f vdot.f fpadot.f];
%User Line: dx = [posdot, hdot, vdot, fpadot];
dx.dY_size = [4,5];
dx.dY_location = Gator1Data.Index29;
dx.dT_size = 4;
dx.dT_location = Gator1Data.Index30;
end


function ADiGator_LoadData()
global ADiGator_dynamics_Y
ADiGator_dynamics_Y = load('dynamics_Y.mat');
return
end